import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from datetime import datetime
import requests  # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–∞—à–µ–º—É FastAPI

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_URL = "http://localhost:8000"  # URL –≤–∞—à–µ–≥–æ FastAPI-—Å–µ—Ä–≤–µ—Ä–∞

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
KEYBOARD = ReplyKeyboardMarkup(
    [["/add_income", "/add_expense"], ["/report"]], resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_income [—Å—É–º–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥\n"
        "/add_expense [—Å—É–º–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "/report - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç",
        reply_markup=KEYBOARD,
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
async def add_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount, category = context.args[0], " ".join(context.args[1:])
        transaction = {
            "amount": float(amount),
            "category": category,
            "date": datetime.now().strftime("%Y-%m-%d"),
            "type": "income",
        }
        response = requests.post(f"{API_URL}/transactions/", json=transaction)
        await update.message.reply_text(f"‚úÖ –î–æ—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await update.message.reply_text("üö´ –û—à–∏–±–∫–∞. –ü—Ä–∏–º–µ—Ä: /add_income 5000 –ó–∞—Ä–ø–ª–∞—Ç–∞")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
async def add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount, category = context.args[0], " ".join(context.args[1:])
        transaction = {
            "amount": float(amount),
            "category": category,
            "date": datetime.now().strftime("%Y-%m-%d"),
            "type": "expense",
        }
        response = requests.post(f"{API_URL}/transactions/", json=transaction)
        await update.message.reply_text(f"‚úÖ –†–∞—Å—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await update.message.reply_text("üö´ –û—à–∏–±–∫–∞. –ü—Ä–∏–º–µ—Ä: /add_expense 300 –ï–¥–∞")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    response = requests.get(f"{API_URL}/transactions/")
    transactions = response.json()
    total_income = sum(t["amount"] for t in transactions if t["type"] == "income")
    total_expense = sum(t["amount"] for t in transactions if t["type"] == "expense")
    balance = total_income - total_expense

    report_text = (
        f"üìä –û—Ç—á–µ—Ç:\n"
        f"–î–æ—Ö–æ–¥—ã: {total_income} ‚ÇΩ\n"
        f"–†–∞—Å—Ö–æ–¥—ã: {total_expense} ‚ÇΩ\n"
        f"–ë–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ"
    )
    await update.message.reply_text(report_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_income", add_income))
    app.add_handler(CommandHandler("add_expense", add_expense))
    app.add_handler(CommandHandler("report", report))
    app.run_polling()

if __name__ == "__main__":
    main()